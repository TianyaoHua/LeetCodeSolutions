class Solution(object):
    def form(self, str, i, m, n, dict):
        if i < 0:
            return 0
        elif (i,m,n) in dict:
            return dict[(i,m,n)]
        else:
            x = str[i][0]
            y = str[i][1]
            if x <= m and y <= n:
                answer = max(self.form(str, i-1, m-x,n-y, dict)+1, self.form(str, i-1, m, n, dict))
                dict.update({(i,m,n):answer})
            else:
                answer = self.form(str, i-1, m, n, dict)
            return answer
    def findMaxForm(self, strs, m, n):
        """
        :type strs: List[str]
        :type m: int
        :type n: int
        :rtype: int
        """
        l = len(strs)
        strs_static = []
        for s in strs:
            x = 0
            y = 0
            for c in s:
                if c == '0':
                    x += 1
                else:
                    y += 1
            strs_static.append((x, y))
        strs_static.sort(key= lambda x: x[0])
        return self.form(strs_static,l-1,m,n,{})

print(Solution().findMaxForm